"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  animals(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: AnimalFilterInput
    order: [AnimalSortInput!]
  ): AnimalsConnection
}

input AnimalFilterInput {
  and: [AnimalFilterInput!]
  or: [AnimalFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  animalType: AnimalTypeFilterInput
  breed: BreedFilterInput
  sex: SexFilterInput
  color: StringOperationFilterInput
  photoUrl: UrlOperationFilterInput
  location: StringOperationFilterInput
}

input AnimalSortInput {
  id: SortEnumType
  name: SortEnumType
  animalType: AnimalTypeSortInput
  breed: BreedSortInput
  sex: SexSortInput
  color: SortEnumType
  photoUrl: UriSortInput
  location: SortEnumType
}

"""
A connection to a list of items.
"""
type AnimalsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AnimalsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Animal!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input AnimalTypeFilterInput {
  and: [AnimalTypeFilterInput!]
  or: [AnimalTypeFilterInput!]
  animalTypeId: IntOperationFilterInput
  name: StringOperationFilterInput
}

input BreedFilterInput {
  and: [BreedFilterInput!]
  or: [BreedFilterInput!]
  breedId: IntOperationFilterInput
  name: StringOperationFilterInput
}

input SexFilterInput {
  and: [SexFilterInput!]
  or: [SexFilterInput!]
  sexId: IntOperationFilterInput
  name: StringOperationFilterInput
}

input UrlOperationFilterInput {
  eq: URL
  neq: URL
  in: [URL]
  nin: [URL]
  gt: URL
  ngt: URL
  gte: URL
  ngte: URL
  lt: URL
  nlt: URL
  lte: URL
  nlte: URL
}

enum SortEnumType {
  ASC
  DESC
}

input AnimalTypeSortInput {
  animalTypeId: SortEnumType
  name: SortEnumType
}

input BreedSortInput {
  breedId: SortEnumType
  name: SortEnumType
}

input SexSortInput {
  sexId: SortEnumType
  name: SortEnumType
}

input UriSortInput {
  absolutePath: SortEnumType
  absoluteUri: SortEnumType
  localPath: SortEnumType
  authority: SortEnumType
  hostNameType: SortEnumType
  isDefaultPort: SortEnumType
  isFile: SortEnumType
  isLoopback: SortEnumType
  pathAndQuery: SortEnumType
  isUnc: SortEnumType
  host: SortEnumType
  port: SortEnumType
  query: SortEnumType
  fragment: SortEnumType
  scheme: SortEnumType
  originalString: SortEnumType
  dnsSafeHost: SortEnumType
  idnHost: SortEnumType
  isAbsoluteUri: SortEnumType
  userEscaped: SortEnumType
  userInfo: SortEnumType
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Animal implements Node {
  id: ID!
  name: String
  animalType: AnimalType!
  breed: Breed!
  sex: Sex
  color: String
  photoUrl: URL
  location: String
  animalId: Int!
}

"""
An edge in a connection.
"""
type AnimalsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Animal!
}

scalar URL

type Breed {
  breedId: Int!
  name: String!
}

type AnimalType {
  animalTypeId: Int!
  name: String!
}

type Sex {
  sexId: Int!
  name: String!
}
